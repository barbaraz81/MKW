% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/t_slope_test.R
\name{t.slope.test}
\alias{t.slope.test}
\title{T-test of two regression slopes or intercepts}
\usage{
t.slope.test(x, y, factor, x2, y2, object_1, object_2, parameter = "slope")
}
\arguments{
\item{x}{the x-values to be used. Can contain the two groups of data if the parameter \code{factor} is provided. Otherwise, contain the x-values for the first group.}

\item{y}{the y-values to be used. As for x, it can contain the two groups of data if the parameter \code{factor} is provided. Otherwise, contain the y-values for the first group.}

\item{factor}{mandatory if providing \code{x} and \code{y} data to separate two groups.}

\item{x2}{the x-values to be used for the second group.}

\item{y2}{the y-values to be used for the second group.}

\item{object_1}{the output of the linear model for the first group; can be an output of \code{"lm"} or of \code{"summary(lm)"}}

\item{object_2}{the output of the linear model for the second group; can be an output of \code{"lm"} or of \code{"summary(lm)"}}

\item{parameter}{the parameter of the regression line to be tested; by default the \code{"slope"}, otherwise can be the \code{"intercept"}}
}
\value{
Returns an object containing the absolute difference between the two estimated parameters ($Estimate), the standard error of this difference ($Std. Error), the t-value of the t-test ($t value), the degrees of freedom of the test ($df) and the p-value of the bilateral t-test ($p-value).
}
\description{
This function performs a t-test to test whether two regression slopes or two regression intercepts are equal or not.
}
\details{
The t-test can be performed on two x and y value vectors if also bringing a factor vector separating the x and y data in two subgroups.
It can also be performed on two independant x and y value vectors, that are x, y, x2 and y2.
Finally, it can be performed on two lm outputs (no matter if the output comes from \code{lm()} or \code{summary(lm()))}.
}
\examples{

# For an expected equality of slope :
x_A<-sort(runif(50,0,10))
x_B<-c()
for (i in 1:50){
  x_B[i]<-x_A[i]+runif(1,-0.1,0.1)
}
x<-c(x_A,x_B)
# Otherwise :
x<-c(sort(runif(50,0,10)),sort(runif(50,0,10)))

y<-c(sort(runif(50,0,2)),sort(runif(50,2,4)))
fac<-as.factor(c(rep("A",50),rep("B",50)))
# Using the x, y and fac vectors only :
t.slope.test(x=x,y=y,factor=fac)
# Using the x, y, x2 and y2 parameters :
t.slope.test(x=x[fac=="A"],y=y[fac=="A"],x2=x[fac=="B"],y2=y[fac=="B"])
# Using the output_1 and output_2 parameters
lm_1<-lm(y[fac=="A"]~x[fac=="A"])
lm_2<-lm(y[fac=="B"]~x[fac=="B"])
t.slope.test(output_1=lm_1,output_2=lm_2)

}
