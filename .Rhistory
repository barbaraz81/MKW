}
else{
age_nodes[node] <- as.numeric(ask(paste0("Please give the age of the ",node,
if (node == 1) {"-st"}
else{
if (node == 2) {"-nd"}
else{"-th"}},
" node; if not known, type 0")))
}
if (age_nodes[node] < suppressWarnings(max(age_taxa[na.omit(as.numeric(node_ends[[node]]))]))) {
age_nodes[node] <- as.numeric(ask(paste0("Error: node age is more recent than (at least) on of the terminal taxa; please give its age or, if not known, type 0")))
}
if (age_nodes[node] == 0) {
if (length(age_nodes) == 1) {
age_nodes[node] <-suppressWarnings(max(age_taxa[na.omit(as.numeric(node_ends[[node]]))])) + 1
}
else{
age_nodes[node] <- max(c(suppressWarnings(max(age_taxa[na.omit(as.numeric(node_ends[[node]]))])), suppressWarnings(max(age_nodes[unlist(foreach(i=1:as.numeric(node_nb_ends[[node]]))%do%which((names(node_ends)==node_ends[[node]][i])))])))) + 1
}
}
}
max_depth <- max(c(max(age_taxa), max(age_nodes)),na.rm=TRUE)
node_coords_x[node] <- max(age_taxa) - age_nodes[node]
if (all(suppressWarnings(is.na(as.numeric(node_ends[[node]]))) == FALSE)) {
node_coords_y[node] <- mean(as.numeric(node_ends[[node]]))
}
else{
where <- suppressWarnings(is.na(as.numeric(node_ends[[node]])))
if (length(levels(as.factor(where))) == 2) {
prev_node <- as.numeric(paste(strsplit(node_ends[[node]][where == TRUE], "")[[1]][-1],collapse=""))
node_coords_y[node] <- mean(c(as.numeric(node_ends[[node]][where == FALSE]), node_coords_y[prev_node]))
}
else{
prev_node_1 <- as.numeric(paste(strsplit(node_ends[[node]][where == TRUE], "")[[1]][-1],collapse=""))
prev_node_2 <- as.numeric(paste(strsplit(node_ends[[node]][where == TRUE], "")[[2]][-1],collapse=""))
node_coords_y[node] <- mean(c(node_coords_y[prev_node_1], node_coords_y[prev_node_2]))
}
}
if (max_depth > plot_depth) {
plot.phylo(temp,edge.color = "white",x.lim = c((min(age_taxa) - (max_depth - max(age_taxa))), max(age_taxa)),label.offset = 0.25)
x_ticks <- invisible(axis(1,labels = NA,tick = FALSE,at = seq(floor(min(age_taxa) - (max_depth - max(age_taxa))), ceiling(max(age_taxa)), max(1,round(log10(max(age_taxa) - (min(age_taxa) - (max_depth - max(age_taxa)))))))))
if (min(x_ticks) < 0) {
x_labels <- rev(x_ticks - (min(x_ticks)))
}
else{
x_labels <- rev(x_ticks)
}
axis(1, at = x_ticks, labels = x_labels)
for (i in 1:max(c(1, length(node_ends) - 1))) {
text(node_coords_x[i],node_coords_y[i],labels = names(node_ends)[i],offset = 0)
x_offset <- strwidth("i")
for (j in 1:as.numeric(node_nb_ends[[i]])) {
start_x <- node_coords_x[i] + x_offset
end_x <- c()
if (suppressWarnings(is.na(as.numeric(node_ends[[i]][j]))) == FALSE) {
end_x <- node_coords_x[i] + age_nodes[i] - age_taxa[as.numeric(node_ends[[i]][j])] - x_offset
}
else{
end_x <- node_coords_x[i] + age_nodes[i] - age_nodes[as.numeric(paste(strsplit(node_ends[[i]][j], split = "")[[1]][-1],collapse=""))] - x_offset
}
start_y <- node_coords_y[i]
end_y <- c()
if (suppressWarnings(is.na(as.numeric(node_ends[[i]][j]))) == FALSE) {
end_y <- as.numeric(node_ends[[i]][j])
}
else{
end_y <- node_coords_y[as.numeric(paste(strsplit(node_ends[[i]][j], split = "")[[1]][-1],collapse=""))]
}
points(c(start_x, end_x), c(start_y, end_y), type = "l")
}
}
}
text(node_coords_x[node],node_coords_y[node],labels = names(node_ends)[node],offset = 0)
x_offset <- strwidth("i")
for (i in 1:as.numeric(node_nb_ends[[node]])) {
start_x <- node_coords_x[node] + x_offset
end_x <- c()
if (suppressWarnings(is.na(as.numeric(node_ends[[node]][i]))) == FALSE) {
end_x <- node_coords_x[node] + age_nodes[node] - age_taxa[as.numeric(node_ends[[node]][i])] - x_offset
}
else{
end_x <- node_coords_x[node] + age_nodes[node] - age_nodes[as.numeric(paste(strsplit(node_ends[[node]][i], split = "")[[1]][-1],collapse=""))] - x_offset
}
start_y <- node_coords_y[node]
end_y <- c()
if (suppressWarnings(is.na(as.numeric(node_ends[[node]][i]))) == FALSE) {
end_y <- as.numeric(node_ends[[node]][i])
}
else{
end_y <- node_coords_y[as.numeric(paste(strsplit(node_ends[[node]][i], split = "")[[1]][-1],collapse=""))]
}
points(c(start_x, end_x), c(start_y, end_y), type = "l")
}
}
node_nb_ends <- list()
node_ends <- list()
node_coords_x <- c()
node_coords_y <- c()
plot_depth <- max(x_ticks)
loop <- "go"
node <- 0
nodemax<--1
age_nodes<-c()
nbnodes<-c()
ultra<-c()
while (loop != "end" & node != nodemax) {
node <- node + 1
if(is.null(age_nodes)){
ultra<-ask("Do you want an ultrametric tree (i.e. without specifying ages of nodes) ? (Y/N)")
}
node_nb_ends[[node]] <- ask(paste0(
if(nodemax<0){"If their are no more nodes, type 'end', otherwise, i"}
else{"I"},
"f the ",node,
if (node == 1) {"-st"}
else{
if (node == 2) {"-nd"}
else{"-th"}},
" node is dichotomic, type 2, or type the number of branches arising from it"))
if (node_nb_ends[[node]] == "end") {
loop <- "end"
node_nb_ends <- node_nb_ends[-node]
node <- node - 1
nbnodes<-node
break
}
if (is.na(suppressWarnings(as.numeric(node_nb_ends[[node]]))) == TRUE) {
cat("You did not provide a number of branches, please provide it now or function will stop","\n")
node_nb_ends[[node]] <- ask(paste0(
if(nodemax<0){"If their are no more nodes, type 'end', otherwise, i"}
else{"I"},
"f the ",node,
if (node == 1) {"-st"}
else{
if (node == 2) {"-nd"}
else{"-th"}},
" node is dichotomic, type 2, or type the number of branches arising from it"))
}
node_ends[[node]] <- as.character(0)
for (i in 1:as.numeric(node_nb_ends[[node]])) {
node_ends[[node]][i] <- ask(paste0("If the ",i,
if (i == 1) {"-st"}
else{
if (i == 2) {"-nd"}
else{"-th"}},
" end is a taxon, type its name; if it is a node, type 'N' and its displayed number"))
if (((any(taxa == node_ends[[node]][i])) | (any(names(node_ends) == node_ends[[node]][i]))) == FALSE) {
cat("You did not provide the name of the written taxa or nodes, please provide it now or function will stop","\n")
node_ends[[node]][i] <- ask(paste0("If the ",i,
if (i == 1) {"-st"}
else{
if (i == 2) {"-nd"}
else{"-th"}},
" end is a taxon, type its name; if it is a node, type 'N' and its displayed number"))
}
if (suppressWarnings(is.na(as.numeric(paste(strsplit(node_ends[[node]][i], "")[[1]][-1],collapse=""))))==TRUE) {
node_ends[[node]][i] <- which(taxa == node_ends[[node]][i])
}
names(node_ends)[node] <- paste0("N", node)
}
if(nodemax>0){
age_nodes<-age_nodes
}
else{
if(ultra=="yes"|ultra=="Y"|ultra=="y"|ultra=="Yes"|ultra=="YES"){
age_nodes[node] <- max(c(suppressWarnings(max(age_taxa[na.omit(as.numeric(node_ends[[node]]))])), suppressWarnings(max(age_nodes[unlist(foreach(i=1:as.numeric(node_nb_ends[[node]]))%do%which((names(node_ends)==node_ends[[node]][i])))])))) + 1
}
else{
age_nodes[node] <- as.numeric(ask(paste0("Please give the age of the ",node,
if (node == 1) {"-st"}
else{
if (node == 2) {"-nd"}
else{"-th"}},
" node; if not known, type 0")))
}
if (age_nodes[node] < suppressWarnings(max(age_taxa[na.omit(as.numeric(node_ends[[node]]))]))) {
age_nodes[node] <- as.numeric(ask(paste0("Error: node age is more recent than (at least) on of the terminal taxa; please give its age or, if not known, type 0")))
}
if (age_nodes[node] == 0) {
if (length(age_nodes) == 1) {
age_nodes[node] <-suppressWarnings(max(age_taxa[na.omit(as.numeric(node_ends[[node]]))])) + 1
}
else{
age_nodes[node] <- max(c(suppressWarnings(max(age_taxa[na.omit(as.numeric(node_ends[[node]]))])), suppressWarnings(max(age_nodes[unlist(foreach(i=1:as.numeric(node_nb_ends[[node]]))%do%which((names(node_ends)==node_ends[[node]][i])))])))) + 1
}
}
}
max_depth <- max(c(max(age_taxa), max(age_nodes)),na.rm=TRUE)
node_coords_x[node] <- max(age_taxa) - age_nodes[node]
if (all(suppressWarnings(is.na(as.numeric(node_ends[[node]]))) == FALSE)) {
node_coords_y[node] <- mean(as.numeric(node_ends[[node]]))
}
else{
where <- suppressWarnings(is.na(as.numeric(node_ends[[node]])))
if (length(levels(as.factor(where))) == 2) {
prev_node <- as.numeric(paste(strsplit(node_ends[[node]][where == TRUE], "")[[1]][-1],collapse=""))
node_coords_y[node] <- mean(c(as.numeric(node_ends[[node]][where == FALSE]), node_coords_y[prev_node]))
}
else{
prev_node_1 <- as.numeric(paste(strsplit(node_ends[[node]][where == TRUE], "")[[1]][-1],collapse=""))
prev_node_2 <- as.numeric(paste(strsplit(node_ends[[node]][where == TRUE], "")[[2]][-1],collapse=""))
node_coords_y[node] <- mean(c(node_coords_y[prev_node_1], node_coords_y[prev_node_2]))
}
}
if (max_depth > plot_depth) {
plot.phylo(temp,edge.color = "white",x.lim = c((min(age_taxa) - (max_depth - max(age_taxa))), max(age_taxa)),label.offset = 0)
x_ticks <- invisible(axis(1,labels = NA,tick = FALSE,at = seq(floor(min(age_taxa) - (max_depth - max(age_taxa))), ceiling(max(age_taxa)), max(1,round(log10(max(age_taxa) - (min(age_taxa) - (max_depth - max(age_taxa)))))))))
if (min(x_ticks) < 0) {
x_labels <- rev(x_ticks - (min(x_ticks)))
}
else{
x_labels <- rev(x_ticks)
}
axis(1, at = x_ticks, labels = x_labels)
for (i in 1:max(c(1, length(node_ends) - 1))) {
text(node_coords_x[i],node_coords_y[i],labels = names(node_ends)[i],offset = 0)
x_offset <- strwidth("i")
for (j in 1:as.numeric(node_nb_ends[[i]])) {
start_x <- node_coords_x[i] + x_offset
end_x <- c()
if (suppressWarnings(is.na(as.numeric(node_ends[[i]][j]))) == FALSE) {
end_x <- node_coords_x[i] + age_nodes[i] - age_taxa[as.numeric(node_ends[[i]][j])] - x_offset
}
else{
end_x <- node_coords_x[i] + age_nodes[i] - age_nodes[as.numeric(paste(strsplit(node_ends[[i]][j], split = "")[[1]][-1],collapse=""))] - x_offset
}
start_y <- node_coords_y[i]
end_y <- c()
if (suppressWarnings(is.na(as.numeric(node_ends[[i]][j]))) == FALSE) {
end_y <- as.numeric(node_ends[[i]][j])
}
else{
end_y <- node_coords_y[as.numeric(paste(strsplit(node_ends[[i]][j], split = "")[[1]][-1],collapse=""))]
}
points(c(start_x, end_x), c(start_y, end_y), type = "l")
}
}
}
text(node_coords_x[node],node_coords_y[node],labels = names(node_ends)[node],offset = 0)
x_offset <- strwidth("i")
for (i in 1:as.numeric(node_nb_ends[[node]])) {
start_x <- node_coords_x[node] + x_offset
end_x <- c()
if (suppressWarnings(is.na(as.numeric(node_ends[[node]][i]))) == FALSE) {
end_x <- node_coords_x[node] + age_nodes[node] - age_taxa[as.numeric(node_ends[[node]][i])] - x_offset
}
else{
end_x <- node_coords_x[node] + age_nodes[node] - age_nodes[as.numeric(paste(strsplit(node_ends[[node]][i], split = "")[[1]][-1],collapse=""))] - x_offset
}
start_y <- node_coords_y[node]
end_y <- c()
if (suppressWarnings(is.na(as.numeric(node_ends[[node]][i]))) == FALSE) {
end_y <- as.numeric(node_ends[[node]][i])
}
else{
end_y <- node_coords_y[as.numeric(paste(strsplit(node_ends[[node]][i], split = "")[[1]][-1],collapse=""))]
}
points(c(start_x, end_x), c(start_y, end_y), type = "l")
}
}
library(jacob.maugoust)
library(jacob.maugoust)
library(jacob.maugoust)
library(jacob.maugoust)
library(jacob.maugoust)
library(jacob.maugoust)
palette
contrasting_palette<-function(value){
colors<-c('#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000')
if(missing(value)){
return(colors)
}
else{
if(value>20){
warning("You have to ask for no more than 20 colors")
}
else{
return(colors[1:value])
}
}
}
contrasting_palette
contrasting_palette()
contrasting_palette(2)
contrasting_palette(22)
contrasting_palette(20)
contrasting_palette()[1:5]
contrasting_palette()[1:22]
5%/%2
5%%2
contrasting_palette<-function(value,random=FALSE){
colors<-c('#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000')
if(missing(value)){
return(colors)
}
else{
if(value>20){
repeat_colors<-ask("Only 20 colors are available, do you want to choose less than 20 colors (type the number) or do you agree that some colors may repeat (type 'Y', 'YES' or 'yes')?")
if(is.numeric(repeat_colors)){
if(repeat_colors<=20){
value<-repeat_colors
}
else{
warning("You did not what I said...")
}
return(colors[1:value])
}
else{
return(c(rep(colors,value%/%20),colors[1:value%%20]))
}
}
else{
return(colors[1:value])
}
}
}
contrasting_palette(22)
library(gtools)
contrasting_palette(22)
22%/%20
rep(colors,22%/%20)
contrasting_palette<-function(value){
colors<-c('#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000')
if(missing(value)){
return(colors)
}
else{
if(value>20){
repeat_colors<-ask("Only 20 colors are available, do you want to choose less than 20 colors (type the number) or do you agree that some colors may repeat (type 'Y', 'YES' or 'yes')?")
if(is.numeric(repeat_colors)){
if(repeat_colors<=20){
value<-repeat_colors
}
else{
warning("You did not what I said...")
}
return(colors[1:value])
}
else{
iterations<-value%/%20
additions<-value%%20
return(c(rep(colors,iterations),colors[1:additions]))
}
}
else{
return(colors[1:value])
}
}
}
contrasting_palette(22)
ncol<-22
paste0("Only ",ncol," colors are available, do you want to choose less than 20 colors (type the number) or do you agree that some colors may repeat (type 'Y', 'YES' or 'yes')?")
contrasting_palette<-function(value,black.and.white=TRUE){
colors<-c('#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000')
ncol<-22
if(black.and.white==FALSE){
ncol<-20
colors<-colors[1:20]
}
if(missing(value)){
return(colors)
}
else{
if(value>ncol){
repeat_colors<-ask(paste0("Only ",ncol," colors are available, do you want to choose less than 20 colors (type the number) or do you agree that some colors may repeat (type 'Y', 'YES' or 'yes')?"))
if(is.numeric(repeat_colors)){
if(repeat_colors<=ncol){
value<-repeat_colors
}
else{
warning("You did not what I said...")
}
return(colors[1:value])
}
else{
iterations<-value%/%ncol
additions<-value%%ncol
return(c(rep(colors,iterations),colors[1:additions]))
}
}
else{
return(colors[1:value])
}
}
}
contrasting_palette(22)
contrasting_palette(23)
contrasting_palette(23)
is.na(as.numeric("typo"))
is.na(as.numeric("14"))
contrasting_palette<-function(value,black.and.white=TRUE){
colors<-c('#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000')
ncol<-22
if(black.and.white==FALSE){
ncol<-20
colors<-colors[1:20]
}
if(missing(value)){
return(colors)
}
else{
if(value>ncol){
repeat_colors<-ask(paste0("Only ",ncol," colors are available, do you want to choose less than 20 colors (type the number) or do you agree that some colors to repeat (type 'Y', 'YES' or 'yes')?"))
if(suppressWarnings(is.na(as.numeric(repeat_colors)))==FALSE){
repeat_colors<-as.numeric(repeat_colors)
if(repeat_colors<=ncol){
value<-repeat_colors
}
else{
warning("You did not what I said...")
}
return(colors[1:value])
}
else{
iterations<-value%/%ncol
additions<-value%%ncol
return(c(rep(colors,iterations),colors[1:additions]))
}
}
else{
return(colors[1:value])
}
}
}
contrasting_palette(23)
contrasting_palette()
library(jacob.maugoust)
library(jacob.maugoust)
library(jacob.maugoust)
?contrasting_palette
library(jacob.maugoust)
extract.from.factor<-function(f1,f2){
if(is.factor(f1)==FALSE){
f1<-as.factor(f1)
}
if(is.character(f2)==FALSE){
f2<-as.character(f2)
}
result<-c()
for (i in 1:length(f1)){
for (j in 1:length(f2)){
if(f1[i]==f2[j]){
result<-c(result,f1[i])
}
}
}
}
f1<-as.factor(c(rep("A",10),rep("B",5),rep("C",8),rep("A",4)))
f2<-c("A","B")
extract.from.factor(f1,f2)
extract.from.factor<-function(f1,f2){
if(is.factor(f1)==FALSE){
f1<-as.factor(f1)
}
if(is.character(f2)==FALSE){
f2<-as.character(f2)
}
result<-c()
for (i in 1:length(f1)){
for (j in 1:length(f2)){
if(f1[i]==f2[j]){
result<-c(result,f1[i])
}
}
}
return(result)
}
extract.from.factor(f1,f2)
extract.from.factor<-function(f1,f2){
if(is.factor(f1)==FALSE){
f1<-as.factor(f1)
}
if(is.character(f2)==FALSE){
f2<-as.character(f2)
}
result<-c()
for (i in 1:length(f1)){
for (j in 1:length(f2)){
if(f1[i]==f2[j]){
result<-as.factor(c(result,as.character(f1[i])))
}
}
}
return(result)
}
f1<-as.factor(c(rep("A",10),rep("B",5),rep("C",8),rep("A",4)))
f2<-c("A","B")
extract.from.factor(f1,f2)
extract.from.factor<-function(f1,f2){
if(is.factor(f1)==FALSE){
f1<-as.factor(f1)
}
if(is.character(f2)==FALSE){
f2<-as.character(f2)
}
result<-c()
for (i in 1:length(f1)){
for (j in 1:length(f2)){
if(f1[i]==f2[j]){
result<-c(result,as.character(f1[i]))
}
}
}
return(as.factor(result))
}
f1<-as.factor(c(rep("A",10),rep("B",5),rep("C",8),rep("A",4)))
f2<-c("A","B")
extract.from.factor(f1,f2)
library(jacob.maugoust)
?extract.from.factor
library(jacob.maugoust)
?extract.from.factor
